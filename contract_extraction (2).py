# -*- coding: utf-8 -*-
"""Contract Extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wq2KxeZLu-GTgrUeDsPH-MjYQRD-9Bac
"""

!pip install pdfplumber

import pdfplumber
import pandas as pd
import re

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text()
    return text

# Function to find the required information using regex and capture surrounding text
def find_information(text):
    info = {}
    surrounding_context = {}

    # Extracting information using regex patterns
    contract_number_match = re.search(r'Contract Number:\s*(.*)', text)
    if contract_number_match:
        info['contract_number'] = contract_number_match.group(1)
    else:
        info['contract_number'] = "Not found"
    if re.search(r'entered into as of\s*(\w+ \d+, \d+)', text):
        info['start_date'] = re.search(r'entered into as of\s*(\w+ \d+, \d+)', text).group(1)
    else:
      info['start_date'] = "Not found"
    end_date_match = re.search(r'terminating on\s*(\w+ \d+, \d+)', text)
    if end_date_match:
        info['end_date'] = end_date_match.group(1)
    else:
        end_date_start = text.find("remain in effect until")
        surrounding_context['end_date_context'] = text[end_date_start:end_date_start + 500]
        info['end_date'] = "Not found"

    supplier_name_match = re.search(r'Party B:[\s\S]+Name:\s*(.*)', text)
    if supplier_name_match:
        info['supplier_name'] = supplier_name_match.group(1)
    else:
        info['supplier_name'] = "Not found"

    invoice_id_match = re.search(r'unique invoice number, starting with\s*(\w+-\d+)', text)
    if invoice_id_match:
        info['invoice_id'] = invoice_id_match.group(1)
    else:
        info['invoice_id'] = "Not found"

    amount_of_contract_match = re.search(r'Total Contract Amount:\s*\$(.*)', text)
    if amount_of_contract_match:
        info['amount_of_contract'] = amount_of_contract_match.group(1)
    else:
        amount_start = text.find("Total Contract Amount:")
        surrounding_context['amount_of_contract_context'] = text[amount_start:amount_start + 500]
        info['amount_of_contract'] = "Not found"

    # Extracting KPIs
    kpi_pattern = re.compile(r'KPIs:[\s\S]+?(?=Reporting Requirements|Miscellaneous)')
    kpis = kpi_pattern.search(text)
    if kpis:
        info['KPIs'] = kpis.group(0).strip()
    else:
        info['KPIs'] = "Not found"

    # Extracting Reporting Requirements
    reporting_pattern = re.compile(r'Reporting Requirements:[\s\S]+?(?=Miscellaneous)')
    reporting_requirements = reporting_pattern.search(text)
    if reporting_requirements:
        info['reporting_requirements'] = reporting_requirements.group(0).strip()
    else:
        info['reporting_requirements'] = "Not found"

    # Extracting Scope of Services
    scope_pattern = re.compile(r'Scope\s*of\s*Services\s*:[\s\S]+?(?=Term\s*and\s*Termination|$)')
    scope_of_services_match = scope_pattern.search(text)
    if scope_of_services_match:
        scope_of_services_text = scope_of_services_match.group(0).strip()

        # Extract subheadings and bullet points
        subheadings_pattern = re.compile(r'([A-Z][\w\s]*):\s*([\s\S]+?)(?=[A-Z][\w\s]*:|$)')
        subheadings = subheadings_pattern.findall(scope_of_services_text)

        subheadings_dict = {}
        for subheading in subheadings:
            subheadings_dict[subheading[0]] = subheading[1].strip().split('\n')

        info['scope_of_services'] = subheadings_dict
    else:
        scope_start = text.find("Scope of Services")
        surrounding_context['scope_of_services_context'] = text[scope_start:scope_start + 1000]
        info['scope_of_services'] = "Not found"

    return info, surrounding_context

# Function to save the extracted information to an Excel file
def save_to_excel(info, surrounding_context, excel_path):
    data = {**info, **surrounding_context}
    df = pd.DataFrame([data])
    df.to_excel(excel_path, index=False)

# Main execution
pdf_path = '/content/Sample Contract.pdf'
excel_path = '/content/Save_info.xlsx'

text = extract_text_from_pdf(pdf_path)
info, surrounding_context = find_information(text)
save_to_excel(info, surrounding_context, excel_path)

excel_path

pdf_path = '/content/Sample Contract.pdf'
excel_path = '/content/Save_info.xlsx'

# Extract text from PDF
text = extract_text_from_pdf(pdf_path)

# Extract information from the text using regex
info, surrounding_context = find_information(text)

# Print specific information
print("Extracted Information:")
print(f"Contract Number: {info['contract_number']}")
print(f"Start Date: {info['start_date']}")
print(f"End Date: {info['end_date']}")
print(f"Supplier Name: {info['supplier_name']}")
print(f"Invoice ID: {info['invoice_id']}")
print(f"Amount of Contract: {info['amount_of_contract']}")
print(f"KPIs:\n{info['KPIs']}")
print(f"Reporting Requirements:\n{info['reporting_requirements']}")
print(f"Scope of Services:\n{info['scope_of_services']}")

# Save extracted information to Excel
save_to_excel(info, surrounding_context, excel_path)

# Display the path to the saved Excel file
print("Excel file saved at:", excel_path)

!apt-get install -y tesseract-ocr
!pip install pytesseract pdfplumber

# Install Tesseract and pytesseract in Google Colab
!apt-get install -y tesseract-ocr
!pip install pytesseract pdfplumber

import pdfplumber
import pytesseract
from PIL import Image
import pandas as pd
import re
import os
from openpyxl.utils import get_column_letter
from openpyxl.utils.exceptions import IllegalCharacterError

# Function to check if the file is an image or a PDF
def is_image(file_path):
    image_extensions = ['.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif']
    _, ext = os.path.splitext(file_path)
    return ext.lower() in image_extensions

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text()
    return text

# Function to extract text from an image using Tesseract
def extract_text_from_image(image_path):
    image = Image.open(image_path)
    text = pytesseract.image_to_string(image)
    return text

# Function to clean text from illegal characters
def clean_text(text):
    return ''.join(c for c in text if c.isprintable())

# Function to find the required information using regex and capture surrounding text
def find_information(text):
    info = {}
    surrounding_context = {}

    # Extracting information using regex patterns
    contract_number_match = re.search(r'Contract Number:\s*(.*)', text)
    if contract_number_match:
        info['contract_number'] = contract_number_match.group(1)
    else:
        info['contract_number'] = "Not found"

    start_date_match = re.search(r'entered into as of\s*(\w+ \d+, \d+)', text)
    if start_date_match:
        info['start_date'] = start_date_match.group(1)
    else:
        info['start_date'] = "Not found"

    end_date_match = re.search(r'terminating on\s*(\w+ \d+, \d+)', text)
    if end_date_match:
        info['end_date'] = end_date_match.group(1)
    else:
        end_date_start = text.find("remain in effect until")
        surrounding_context['end_date_context'] = text[end_date_start:end_date_start + 500]
        info['end_date'] = "Not found"

    supplier_name_match = re.search(r'Party B:[\s\S]+Name:\s*(.*)', text)
    if supplier_name_match:
        info['supplier_name'] = supplier_name_match.group(1)
    else:
        info['supplier_name'] = "Not found"

    invoice_id_match = re.search(r'unique invoice number, starting with\s*(\w+-\d+)', text)
    if invoice_id_match:
        info['invoice_id'] = invoice_id_match.group(1)
    else:
        info['invoice_id'] = "Not found"

    amount_of_contract_match = re.search(r'Total Contract Amount:\s*\$(.*)', text)
    if amount_of_contract_match:
        info['amount_of_contract'] = amount_of_contract_match.group(1)
    else:
        amount_start = text.find("Total Contract Amount:")
        surrounding_context['amount_of_contract_context'] = text[amount_start:amount_start + 500]
        info['amount_of_contract'] = "Not found"

    # Extracting KPIs
    kpi_pattern = re.compile(r'KPIs:[\s\S]+?(?=Reporting Requirements|Miscellaneous)')
    kpis = kpi_pattern.search(text)
    if kpis:
        info['KPIs'] = kpis.group(0).strip()
    else:
        info['KPIs'] = "Not found"

    # Extracting Reporting Requirements
    reporting_pattern = re.compile(r'Reporting Requirements:[\s\S]+?(?=Miscellaneous)')
    reporting_requirements = reporting_pattern.search(text)
    if reporting_requirements:
        info['reporting_requirements'] = reporting_requirements.group(0).strip()
    else:
        info['reporting_requirements'] = "Not found"

    # Extracting Scope of Services
    scope_pattern = re.compile(r'Scope\s*of\s*Services\s*:[\s\S]+?(?=Term\s*and\s*Termination|$)')
    scope_of_services_match = scope_pattern.search(text)
    if scope_of_services_match:
        scope_of_services_text = scope_of_services_match.group(0).strip()

        # Extract subheadings and bullet points
        subheadings_pattern = re.compile(r'([A-Z][\w\s]*):\s*([\s\S]+?)(?=[A-Z][\w\s]*:|$)')
        subheadings = subheadings_pattern.findall(scope_of_services_text)

        subheadings_dict = {}
        for subheading in subheadings:
            subheadings_dict[subheading[0]] = subheading[1].strip().split('\n')

        info['scope_of_services'] = subheadings_dict
    else:
        scope_start = text.find("Scope of Services")
        surrounding_context['scope_of_services_context'] = text[scope_start:scope_start + 1000]
        info['scope_of_services'] = "Not found"

    return info, surrounding_context

# Function to save the extracted information to an Excel file
def save_to_excel(info, surrounding_context, excel_path):
    data = {**info, **surrounding_context}
    df = pd.DataFrame([data])

    # Clean illegal characters in all dataframe cells
    for column in df.columns:
        df[column] = df[column].apply(lambda x: clean_text(str(x)))

    df.to_excel(excel_path, index=False)

# Main execution
file_path = '/content/Sample Contract.pdf'  # Change this to your file path
excel_path = '/content/Save_info.xlsx'

# Check if the file is an image or a PDF and extract text accordingly
if is_image(file_path):
    text = extract_text_from_image(file_path)
else:
    text = extract_text_from_pdf(file_path)

info, surrounding_context = find_information(text)
save_to_excel(info, surrounding_context, excel_path)

# Install necessary packages in Google Colab
!apt-get install -y tesseract-ocr
!pip install pytesseract pdfplumber pdf2image

import pdfplumber
import pytesseract
from PIL import Image
import pandas as pd
import re
import os
from pdf2image import convert_from_path

# Function to check if the file is an image or a PDF
def is_image(file_path):
    image_extensions = ['.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif']
    _, ext = os.path.splitext(file_path)
    return ext.lower() in image_extensions

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            extracted_text = page.extract_text()
            if extracted_text:
                text += extracted_text
            else:
                # Handle scanned PDF page
                text += extract_text_from_image(convert_pdf_page_to_image(page))
    return text

# Function to extract text from an image using Tesseract
def extract_text_from_image(image):
    text = pytesseract.image_to_string(image)
    return text

# Function to convert PDF page to image
def convert_pdf_page_to_image(pdf_page):
    image = pdf_page.to_image(resolution=300)
    return image.original

# Function to clean text from illegal characters
def clean_text(text):
    return ''.join(c for c in text if c.isprintable())

# Function to find the required information using regex and capture surrounding text
def find_information(text):
    info = {}
    surrounding_context = {}

    # Extracting information using regex patterns
    contract_number_match = re.search(r'Contract Number:\s*(.*)', text)
    if contract_number_match:
        info['contract_number'] = contract_number_match.group(1)
    else:
        info['contract_number'] = "Not found"

    start_date_match = re.search(r'entered into as of\s*(\w+ \d+, \d+)', text)
    if start_date_match:
        info['start_date'] = start_date_match.group(1)
    else:
        info['start_date'] = "Not found"

    end_date_match = re.search(r'terminating on\s*(\w+ \d+, \d+)', text)
    if end_date_match:
        info['end_date'] = end_date_match.group(1)
    else:
        end_date_start = text.find("remain in effect until")
        surrounding_context['end_date_context'] = text[end_date_start:end_date_start + 500]
        info['end_date'] = "Not found"

    supplier_name_match = re.search(r'Party B:[\s\S]+Name:\s*(.*)', text)
    if supplier_name_match:
        info['supplier_name'] = supplier_name_match.group(1)
    else:
        info['supplier_name'] = "Not found"

    invoice_id_match = re.search(r'unique invoice number, starting with\s*(\w+-\d+)', text)
    if invoice_id_match:
        info['invoice_id'] = invoice_id_match.group(1)
    else:
        info['invoice_id'] = "Not found"

    amount_of_contract_match = re.search(r'Total Contract Amount:\s*\$(.*)', text)
    if amount_of_contract_match:
        info['amount_of_contract'] = amount_of_contract_match.group(1)
    else:
        amount_start = text.find("Total Contract Amount:")
        surrounding_context['amount_of_contract_context'] = text[amount_start:amount_start + 500]
        info['amount_of_contract'] = "Not found"

    # Extracting KPIs
    kpi_pattern = re.compile(r'KPIs:[\s\S]+?(?=Reporting Requirements|Miscellaneous)')
    kpis = kpi_pattern.search(text)
    if kpis:
        info['KPIs'] = kpis.group(0).strip()
    else:
        info['KPIs'] = "Not found"

    # Extracting Reporting Requirements
    reporting_pattern = re.compile(r'Reporting Requirements:[\s\S]+?(?=Miscellaneous)')
    reporting_requirements = reporting_pattern.search(text)
    if reporting_requirements:
        info['reporting_requirements'] = reporting_requirements.group(0).strip()
    else:
        info['reporting_requirements'] = "Not found"

    # Extracting Scope of Services
    scope_pattern = re.compile(r'Scope\s*of\s*Services\s*:[\s\S]+?(?=Term\s*and\s*Termination|$)')
    scope_of_services_match = scope_pattern.search(text)
    if scope_of_services_match:
        scope_of_services_text = scope_of_services_match.group(0).strip()

        # Extract subheadings and bullet points
        subheadings_pattern = re.compile(r'([A-Z][\w\s]*):\s*([\s\S]+?)(?=[A-Z][\w\s]*:|$)')
        subheadings = subheadings_pattern.findall(scope_of_services_text)

        subheadings_dict = {}
        for subheading in subheadings:
            subheadings_dict[subheading[0]] = subheading[1].strip().split('\n')

        info['scope_of_services'] = subheadings_dict
    else:
        scope_start = text.find("Scope of Services")
        surrounding_context['scope_of_services_context'] = text[scope_start:scope_start + 1000]
        info['scope_of_services'] = "Not found"

    return info, surrounding_context

# Function to save the extracted information to an Excel file
def save_to_excel(info, surrounding_context, excel_path):
    data = {**info, **surrounding_context}
    df = pd.DataFrame([data])

    # Clean illegal characters in all dataframe cells
    for column in df.columns:
        df[column] = df[column].apply(lambda x: clean_text(str(x)))

    df.to_excel(excel_path, index=False)

# Main execution
file_path = '/content/Sample Contract.pdf'  # Change this to your file path
excel_path = '/content/Save_info.xlsx'

# Check if the file is an image or a PDF and extract text accordingly
if is_image(file_path):
    text = extract_text_from_image(file_path)
else:
    text = extract_text_from_pdf(file_path)

info, surrounding_context = find_information(text)
save_to_excel(info, surrounding_context, excel_path)